


<< file 상태 >>

Untracked 상태 ==> 파일을 생성한 후 한번도 add를 하지 않은 상태
Tracked 상태 ==> 파일이 Git에 의해 그 변동사항이 추적되는 상태 

(Tracked 3가지 형태)

1) Staged 상태 : 파일 수정 후 Index(staging area)에 올라가 있는 상태
2) Unmodified 상태 : 현재 파일이 최신 커밋 파일과 비교하여 바뀐게 없는 상태
3) Modified 상태 : 현재 파일이 최신 커밋 파일과 비교하여 바뀐게 있는 상태

<< Git의 영역 4가지 >> 

1) Working Directory (작업영역)
-- 실제 프로젝트 디렉토리
-- .git 이력과 관련 정보가 저장 된 .git을 제외한 모든 영역
-- 실제 코드의 추가, 수정, 삭제 등 작업이 이루어지는 영역

2) Repository (저장소)
-- 파일, 폴더를 변경 이력별로 저장해 두는 곳
-- .git 디렉토리내 존재하며 2가지로 나뉜다.
	<Local Repository> : 개인 PC에 파일이 저장되는 개인 저장소
	<Remote Repository : 원격 저장소 전용 서버에서 관리되며, 여러 사람들과 같이 공유도
			    가능한 저장소

3) Index (Staging Area)
-- Working Directory에서 Repository로 정보 저장 전 준비 영역
-- 파일 상태를 기록, 스테이징 한다고 표현 한다.
-- .git/index 파일로 관리된다.

♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣

 -  git add : Working Directory 에서 Index 영역으로 정보가 저장됨.

 -  git commit : Index영역에서 Repository로 정보가 저장됨.

♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣♣


4) Stash
-- 위의 3가지 영역과 다른 별개의 임시 영역

-- 임시적으로 작업사항을 저장해두고 나중에 꺼내올 수 있다.

--------------------------------------------------------------------------------------------------------

-------------기본구성--------------------------------------------------------------------------------

git --version >> 버전확인

git config --global user.???? "????" >> 사용자 등록
git config --global user.email "?????@???.com" >> 이메일 등록

git config --list >> 확인

git init >> 사용할 폴더에 가서 git bash 하고 사용하는 명령어 /c/work/project 생기게

git status >> 파일 상태 확인 

$ git status
On Branch master ==> 현재 작업중인 Branch ( 기본 branch는 master 이다) 

No commits yet

nothing to commit (create/copy files and use "git add" to track)

-------------------------------------------------------------------------------------------------------


>> 우선 원하는 폴더에 bash를 한뒤 그 폴더에 commit 할 파일을 넣어둔뒤

git add >> index에 파일 저장

1) git add . => add가 안된 모든 파일 저장
2) git add ????.txt =>지정해서 저장

==> git add 를 하기전에 $git status 를 하면 Untracked files(위 설명)  가 나온다

==> git add 를 하면 인덱스(Staging Area)에 올라간것 ( project 폴더 안 Index 파일을 메모장으로 확인)


git rm -- cached ????.txt >> Index(staging area)에 추가된 파일을 삭제 
				여기서 포인트는 (Working directory 의 파일은 유지)

git commit -m " 커밋 메세지" >> 스테이징 영역의 파일들을 커밋한다
					-m 은 커밋메세지 옵션
git commit -a >> 자동으로 add를 진행한 후 커밋

git commit -am "커밋 메세지" >> -a,-m의 옵션을 합친 형태

git commit -v >> 커밋 메세지에 diff의 내용 포함

git log >>  commit history(기록) 확인

git log 명령어를 입력하면 나오는
==> Author는 아래 명령을 통해 세팅됐던 user, email이 표기 된다. 
git config --global user.???? "????"
git config --global user.email "?????@???.com"

-------------------------------------------------------------------------------------------------------------

로컬저장소(git) 원격 저장소(git hub) 연결

1) git hub 사이트에서 New Repository 생성
==> 공개(Public) 모든 사용자가 볼 수 있다.
==> 비공개(Private) 나와 초대된 사용자만  볼 수 있다.

2) git bash 에서 >> git remote add origin https://github.com/flameblade/timespace.git
	명령어를 입력해준다 ( URL은 GITHUB 프로필 제일 상단에 복사할수 있다)
	
3) git remote >> 추가한 원격저장소의 목록 확인
==> git remote -v >> 상세히 보기 

==> git remote show 이름(origin)>> 원격 저장소 지정 정보를 확인
==> git remote rm >> 원격저장소 삭제


4) git push >> 로컬 저장소에 commit한 파일들을 원격 저장소에 추가 하는 명령어
		>> git push [원격 저장소 이름(별명)][브랜치명]
		>> ex) git push origin master

5) git push -u origin master >> push 완료 사이트 들어가면 올라와있다.
					







